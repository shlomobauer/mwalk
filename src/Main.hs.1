module Main where
import System.Environment
import System.IO
import System.Random

--import Data.List.Split
--import Data.Set
--import Data.List

main = do 
 args <- getArgs
 if (length args) < 1
 then do
  putStrLn("Missing path length")
 else do
  let pathlength = (read (args!!0))::Int
  putStrLn("#step dist")

  genWalk 0 pathlength 0

  putStrLn("Testing My Random Number Generator")
  
  let a = getRandomInt 123456789
  let b = getRandomInt a
  let c = getRandomInt b
  let d = getRandomInt c

  print (a, b, c, d)

  e <- getRandom02
  
  let e' = show e

  let f = (read e')::Int

  putStrLn("f is an Int with value: " ++ (show f))

  let gg = getRandomInt (f+1)*2 
  print(gg)

  let hh = getRandomInt e
  print(hh)

getRandomInt :: Int -> Int
getRandomInt s = if even (rand s) then 0 else 1
 
getRandom02 = do
 randomRIO(0,1 :: Int)

genWalk a n s =
 if a == n
 then do
  return ()
 else do
  putStrLn((show a) ++ " " ++ (show s))
  r <- getRandom02
  if r == 0 then do genWalk (a+1) n (s+1)
  else do genWalk (a+1) n (s-1)

rand :: Int -> Int
rand seed = (1103515245 * seed + 12345) `mod` (2^32)
