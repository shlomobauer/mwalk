module Main where
import System.Environment
import System.IO
import System.Random

--import Data.List.Split
--import Data.Set
--import Data.List

main = do 
 args <- getArgs
 if (length args) < 1
 then do
  putStrLn("Missing Length")
 else do
  let plen = (read (args!!0))::Int

  let m=[0.2]
  genStates 0 plen m

  let m' = [0.1, 0.2, 0.7]
  genState m'


getRandom01 = do
 randomRIO(0,1 :: Float)

getNextState :: Float -> [Float] -> Int
getNextState r m =
 if r < (m!!0) then 0 else 1

-- getNextState' index length cumProb r probs
-- 0 3 0 0.4 [0.1, 0.2, 0.7]

genState :: [Float] -> IO ()
genState m = do
 r <- getRandom01
 let s = getNextState' 0 (length m) 0.0 r m
 putStrLn("r: " ++ (show r) ++ ", m: " ++ (show m) ++ ", s: " ++ (show s))

getNextState' _ n _ _ [] = n
getNextState' a n z r m =
 let h = ((head m) + z) in
  if r < h then a
  else getNextState' (a+1) n h r (tail m) 

genStates :: Int -> Int -> [Float] -> IO ()
genStates a n m =
  if a == n then do
   return ()
  else do
   r <- getRandom01
   let rc = getNextState r m
   putStrLn("r: " ++ (show r) ++ ", m: " ++ (show m) ++ ", s: " ++ (show rc))
   genStates (a+1) n m

rand :: Int -> Int
rand seed = (1103515245 * seed + 12345) `mod` (2^32)
